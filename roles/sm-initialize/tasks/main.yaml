---
- name: update repositories
  apt: 
    update_cache: yes
    upgrade: safe
  changed_when: False

- name: default packages
  apt:  
    name: "{{ default_packages }}"
    state: latest

- name: packages to remove
  apt:  
    name: "{{ remove_packages }}"
    state: latest

- name: Copy zsh environment file
  copy:
    src: "../files/zshenv"
    dest: "/etc/zsh/"
    owner: root
    group: root
    mode: '644'

- name: Copy zsh profile
  copy:
    src: "../files/zprofile"
    dest: "/etc/zsh/"
    owner: root
    group: root
    mode: '644'

- name: create zfs user datasets
  when: zfs_root|bool == true
  block:
    - name: create zfs dataset for standard user home directory
      community.general.zfs:
        name: "zroot/DATA/home/{{ user }}"
        state: present
        extra_zfs_properties:
          canmount: on
          mountpoint: "/home/{{ user }}"

    - name: create .local dataset
      community.general.zfs:
        name: "zroot/DATA/home/{{ user }}/.local"
        state: present
        extra_zfs_properties:
          canmount: on
          mountpoint: "/home/{{ user }}/.local"

    - name: create .local/share dataset
      community.general.zfs:
        name: "zroot/DATA/home/{{ user }}/.local/share"
        state: present
        extra_zfs_properties:
          canmount: on
          mountpoint: "/home/{{ user }}/.local/share"

- name: create standard user
  user:
    name: "{{ user }}"
    state: present
    shell: /bin/zsh
    uid: 1001
    group: users
    create_home: yes
    home: "/home/{{ user }}"
    groups: sudo
    append: yes
    
- name: change user password
  user:
    name: "{{ user }}"
    update_password: always
    password: "{{ user_passwd |password_hash('sha512') }}"

- name: create directories or fix ownership on user zfs datasets
  file:
    path: "/home/{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: users
    mode: '755'
  loop: 
    - "{{ user }}"
    - "{{ user }}/.local"
    - "{{ user }}/.local/share"

- name: Create .ssh directory
  file:
    path: "/home/{{ user }}/.ssh"
    state: directory
    owner: "{{ user }}"
    group: users
    mode: '751'

- name: Copy ssh authorized_keys
  copy:
    src: "../files/authorized_keys"
    dest: "/home/{{ user }}/.ssh/"
    owner: "{{ user }}"
    group: users
    mode: '644'    

- name: Copy zsh config
  copy:
    src: "../files/.zshrc"
    dest: "/home/{{ user }}/"
    owner: "{{ user }}"
    group: users
    mode: '644'

- name: Copy zsh-antigen config
  copy:
    remote_src: yes
    src: "/usr/share/zsh-antigen/antigen.zsh"
    dest: "/home/{{ user }}/"
    owner: "{{ user }}"
    group: users
    mode: '644'

- name: Copy git config
  copy:
    src: "../files/.gitconfig"
    dest: "/home/{{ user }}/"
    owner: "{{ user }}"
    group: users
    mode: '644'

- name: Copy vim config
  copy:
    src: "../files/.vimrc"
    dest: "/home/{{ user }}/"
    owner: "{{ user }}"
    group: users
    mode: '644'

- name: change hostname
  hostname:  
    name: "{{ hostname }}"
    use: systemd

- name: update hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: "\
      {# Match an IPv4/v6 address at the start #}\
      ^\\s*[0-9a-f:.]+\
      {# Match at least one whitespace, and any non-hostname names #}\
      (\\s+.*)*\\s\
      {# Match either our fqdn or hostname #}\
      (({{ ansible_hostname | regex_escape() }}|unconfigured-host).({{ ansible_domain | regex_escape() }}|managenet.lan)|({{ ansible_hostname | regex_escape() }}|unconfigured-host))\
      (\\s+.*)*\\s\
      (({{ ansible_hostname | regex_escape() }}|unconfigured-host).({{ ansible_domain | regex_escape() }}|managenet.lan)|({{ ansible_hostname | regex_escape() }}|unconfigured-host))\
      {# Require there be a word boundary at the end of the name(s). #}\
      {# This can be any whitespace, or end-of-line. #}\
      (\\s+.*|\\s*)$"
    line: "{{ ansible_default_ipv4.address }} {{ hostname }}.{{ ansible_domain }} {{ hostname }}"
    backup: yes

- name: copy chrony config template
  template:
    src: "../templates/chrony.conf.j2"
    dest: "/etc/chrony/chrony.conf"
    owner: root
    group: root
    mode: '644'

- name: setup chrony keys
  lineinfile:
    state: present
    path: "/etc/chrony/chrony.keys"
    regexp: "{{ chrony_key }}"
    line: "{{ chrony_key }}"
    create: yes
    owner: root
    group: root
    mode:  '640'
 
- name: change root password
  user:
    name: root
    update_password: always
    password: "{{ root_passwd |password_hash('sha512') }}"

- name: change ansible user password
  user:
    name: "{{ ansible_user }}"
    update_password: always
    password: "{{ ansible_passwd |password_hash('sha512') }}"