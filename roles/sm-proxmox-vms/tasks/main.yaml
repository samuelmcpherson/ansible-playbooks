---
- name: create zfs flatpak datasets
  community.general.zfs:
    name: "zroot/DATA/var/lib/vz/images/{{ item.id }}"
    state: present
    extra_zfs_properties:
      canmount: on
      mountpoint: "/var/lib/vz/images/{{ item.id }}"
  loop: "{{ vms }}"


- name: Create new VM with minimal options and given vmid
  community.general.proxmox_kvm:
    api_user: root@pam
    api_password: "{{ root_passwd }}"
    api_host: "{{ ansible_default_ipv4.address }}"
    name: "{{ item.name }}"
    node: "{{ hostname }}"
    vmid: "{{ item.id }}"
    cpu: host
    cores: "{{ item.cores }}"
    #storage: local
    #format: qcow2
    memory: "{{ item.memory }}"
    ostype: "{{ item.ostype }}"
    scsihw: virtio-scsi-pci
    scsi: '{"scsi0":"local:20,format=qcow2,cache=writeback,ssd=1"}' 
    bios: ovmf
    efidisk0:
      storage: local
      format: qcow2
      efitype: 4m
      pre_enrolled_keys: False
    ide: '{"ide0":"local:iso/debian-custom.iso,media=cdrom"}'
    net:
      net0: 'virtio,bridge=vmbr0'
    state: present 
  loop: "{{ vms }}"

- name: Create new VM with minimal options and given vmid
  community.general.proxmox_kvm:
    api_user: root@pam
    api_password: "{{ root_passwd }}"
    api_host: "{{ ansible_default_ipv4.address }}"
    name: "{{ item.name }}"
    node: "{{ hostname }}"
    vmid: "{{ item.id }}"
    state: started
  loop: "{{ vms }}"

- name: check options
  community.general.proxmox_kvm:
    api_user: root@pam
    api_password: "{{ root_passwd }}"
    api_host: "{{ ansible_default_ipv4.address }}"
    name: "{{ item.name }}"
    node: "{{ hostname }}"
    vmid: "{{ item.id }}"
    state: current
  register: results
  loop: "{{ vms }}"

- name: return vm info
  debug:
    msg: "{{ results }}"

#       net1: 'e1000,bridge=vmbr2'
#     virtio:
#       virtio0: 'VMs_LVM:10'
#       virtio1: 'VMs:2,format=qcow2'
#       virtio2: 'VMs:5,format=raw'
#     
#     
#     sata:
#       sata0: 'VMs_LVM:10,format=raw'
#     bios: ovmf
#     efidisk0:
#       storage: VMs_LVM_thin
#       format: raw
#       efitype: 4m
#       pre_enrolled_keys: False

# - name: Create new VM and lock it for snapshot
#   community.general.proxmox_kvm:
#     api_user: root@pam
#     api_password: secret
#     api_host: helldorado
#     name: spynal
#     node: sabrewulf
#     lock: snapshot

# - name: Create new VM and set protection to disable the remove VM and remove disk operations
#   community.general.proxmox_kvm:
#     api_user: root@pam
#     api_password: secret
#     api_host: helldorado
#     name: spynal
#     node: sabrewulf
#     protection: yes

# - name: Start/stop VM
#   community.general.proxmox_kvm:
#     api_user: root@pam
#     api_password: secret
#     api_host: helldorado
#     name: spynal
#     node: sabrewulf
#     state: started
#     state: stopped
#     #force: yes
#     state: restarted
#     state: absent

# - name: Get VM current state
#   community.general.proxmox_kvm:
#     api_user: root@pam
#     api_password: secret
#     api_host: helldorado
#     name: spynal
#     node: sabrewulf
#     state: current

# - name: Update VM configuration
#   community.general.proxmox_kvm:
#     api_user: root@pam
#     api_password: secret
#     api_host: helldorado
#     name: spynal
#     node: sabrewulf
#     cores: 8
#     memory: 16384
#     update: yes
